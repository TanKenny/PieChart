from tkinter import *
from turtle import *

# Implementation of the interface '
# initializes an interface and sets the size '
# ---------------------------------------------------------------------
interface = Tk()
interface.resizable(width=False, height=False)
interface.geometry('{}x{}'.format(350, 350))

# adds the required widgets to the interface like about and instruction texts, buttons and entry box '''
aboutString = "About: Python program that draws a \n pie chart of the n most frequent \n letters in \"Words.txt\" file"
about = Label(interface, text=aboutString)
about.grid(row=0, column=0, padx=(25), pady=(10, 10))
instruction = Label(interface,
                    text="Enter n below:\n(0 <= n <= max # of characters used) \n , max is count of all different letters in text file")
instruction.grid(row=1, column=0, padx=(25), pady=(10, 10))
entry = Entry(interface, bd=5)
entry.grid(row=2, column=0, padx=(25), pady=(10, 10))

n = 0

''' function that is called after the submit button is pressed.
    assigns n to the value entered by user and changes GUI '''

def assign_n():
    global n
    n = int(entry.get())
    interface.destroy()

button = Button(interface, text="Draw pie chart", command=assign_n)
button.grid(row=3, column=0, padx=(25), pady=(10, 10))
createdByString = "Created by: Kenny Tan"
credit = Label(interface, text=createdByString)
credit.grid(row=4, column=0, padx=(25), pady=(10, 10))
interface.mainloop()
# ---------------------------------------------------------------------

' Calculation of probablities '
# ---------------------------------------------------------------------

''' function that converts a dictionary into a 2d list with
    letter occurences sorted in descending order '''

def sortDictByOccurence(unsortedDict):
    sortedDict = sorted(unsortedDict.items(), key=lambda t: t[1], reverse=True)
    return sortedDict

''' reads the txt file line by line, word to word and
    adds characters as keys and value as their occurence 
    in a dictionary '''
acceptableLowerChars = "abcdefghijklmnopqrstuvwxyz"
acceptableUpperChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
letterCounts = {}

with open("Words.txt", 'r') as f:
    wordList = f.readlines()

for line in wordList:  # goes through every line in the file
    for c in line:  # then goes through every character in the string line
        # if the character is a lower case or upper case alphabet, increment in the dictionary
        if c == '\n' or c == '\t':  # Anything but space, newline, and tab
            continue  # will be counted up for occurences
        if c in acceptableLowerChars or c in acceptableUpperChars:
            c = c.lower()
        if c in letterCounts:
            letterCounts[c] += 1
        else:
            letterCounts[c] = 1

''' sorts dictionary by letter occurences (high to low)
    converted into a 2d array, where 2dlist[i][0] is character
    and 2dlist[i][1] is its occurence. Example: [("a",3),("b",2),...] '''
letterCounts = sortDictByOccurence(letterCounts)

''' sums up the frequencies of all character occurences
    which will be used later to calculate probability of letters '''
sumOfFreq = 0
for key in letterCounts:
    sumOfFreq += key[1]

''' counts probability of top n characters with highest freqs.
    puts probability and letter in a dictionary (key = letter, value = prob)
    calculates "All other letters" freqs as well by subtracting
    n probabilites from 1 '''
n_freqs = {}
otherProb = 1
# check if n is more than length of letter_counts
if n > len(letterCounts):
    n = len(letterCounts)
for i in range(n):
    probability = letterCounts[i][1] / sumOfFreq
    otherProb -= probability
    n_freqs[letterCounts[i][0]] = probability

# If n is more than length of letter_counts, no need of all other letters probability.
if n >= len(letterCounts):
    otherProb = 0
' converts the dictionary into 2d list again by "sorting" it '
n_freqs = sortDictByOccurence(n_freqs)
# ---------------------------------------------------------------------

' Construction of pie chart '
# ---------------------------------------------------------------------
' radius of the pie chart circle and color choices for 26 letters '
r = 130
colors = ["peachpuff", "aquamarine", "lightgoldenrodyellow",
          "pink", "yellow", "sandybrown", "cornflowerblue", "lightgreen",
          "greenyellow", "lightcoral", "mediumpurple", "steelblue",
          "khaki", "powderblue", "lightsalmon", "lime", "hotpink",
          "burlywood", "violet", "skyblue", "tan", "palegreen",
          "silver", "coral", "beige", "palegoldenrod"]

# draws the initial circle
penup()
goto(0, -r)
pendown()
circle(r)
penup()
up()
goto(0, 0)
pendown()

''' if n greater is than or equal to 1 it will draw the first segment
    and setup the drawing to make it easier for next segments to be
    drawn easily.
    else n is 0 and the pie chart is labeled "All other characters, 1" '''
if n >= 1:  # segment drawing for n = 1
    fillcolor(colors[0])
    begin_fill()
    fd(r)
    left(90)
    # calculation of arc length is divided by 2 to label the segment in the center of the arc and draw
    circle(r, n_freqs[0][1] * 360 / 2)
    # segment labeled at that point
    if xcor() > 0:
        write(n_freqs[0][0] + ", " + str(n_freqs[0][1]), align="left", font=("Arial", 11, "bold"))
    else:
        write(n_freqs[0][0] + ", " + str(n_freqs[0][1]), align="right", font=("Arial", 11, "bold"))
    # second half of arc is drawn
    circle(r, n_freqs[0][1] * 360 / 2)
    position = pos()
    goto(0, 0)
    end_fill()
    if n > 1:  # segment drawings for n > 1
        for i in range(1, n):
            try:
                fillcolor(colors[i])
            except:
                fillcolor(colors[i - 10])
            begin_fill()
            goto(position)
            circle(r, n_freqs[i][1] * 360 / 2)
            if xcor() > 0:
                write(n_freqs[i][0] + ", " + str(n_freqs[i][1]), align="left", font=("Arial", 11, "bold"))
            else:
                write(n_freqs[i][0] + ", " + str(n_freqs[i][1]), align="right", font=("Arial", 11, "bold"))
            circle(r, n_freqs[i][1] * 360 / 2)
            position = pos()
            goto(0, 0)
            end_fill()
    # drawing of "All other characters" segment
    if otherProb != 0:
        fillcolor('lightgrey')
        begin_fill()
        goto(position)
        circle(r, otherProb * 360 / 2)
        if xcor() > 0:
            write("All other letters, " + str(otherProb), align="left", font=("Arial", 11, "bold"))
        else:
            write("All other letters, " + str(otherProb), align="right", font=("Arial", 11, "bold"))
        circle(r, otherProb * 360 / 2)
        position = pos()
        goto(0, 0)

else:  # construction of pie chart if n = 0
    penup()
    fd(r)
    left(90)
    pendown()
    fillcolor('lightgrey')
    begin_fill()
    circle(r)
    write("All other letters, " + str(otherProb), align="left", font=("Arial", 11, "bold"))

# ends the drawing of final segment
end_fill()
done()
